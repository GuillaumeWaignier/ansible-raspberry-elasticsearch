---

############# REQUIREMENT #################

- name: Install Pip
  apt:
    name: python3-pip
    state: present

- name: Install python-openssl
  apt:
    name: python3-openssl
    state: present

- name: Create {{ base_directory }} directory on {{ ansible_default_ipv4.address }}
  file:
    path: "{{ base_directory }}"
    state: directory
    mode: 0755
    owner: "root"
    group: "root"

############# GENERATE ROOT CERTIFICATE #################
  
- name: Generate an OpenSSL private key for the root CA
  openssl_privatekey:
    path: "{{ base_directory }}/ca.key"
    size: 4096
    passphrase : "{{ ca_passphrase }}"
    cipher: auto

- name: Generate an OpenSSL Certificate Signing Request with Subject information for root CA
  openssl_csr:
    path: "{{ base_directory }}/ca.csr"
    privatekey_path: "{{ base_directory }}/ca.key"
    common_name: Elastic Certificate Autogenerated CA
    basicConstraints: "CA:TRUE"
    basic_constraints_critical: true
    privatekey_passphrase: "{{ ca_passphrase }}"
    key_usage:
      - cRLSign
      - digitalSignature
      - keyCertSign
    key_usage_critical: true

- name: Generate a Self Signed OpenSSL root CA certificate
  openssl_certificate:
    path: "{{ base_directory }}/ca.crt"
    privatekey_path: "{{ base_directory }}/ca.key"
    privatekey_passphrase: "{{ ca_passphrase }}"
    csr_path: "{{ base_directory }}/ca.csr"
    provider: selfsigned

- name: Transfert {{ base_directory }}/ca.crt on local
  fetch:
    src: "{{ base_directory }}/ca.crt"
    dest: "/tmp/es/"
    flat: yes
  changed_when: false

############# GENERATE NODE CERTIFICATE #################

- name: Generate an OpenSSL private key for the node
  openssl_privatekey:
    path: "{{ base_directory }}/node-{{ item }}.key"
    size: 4096
  loop: "{{ groups['elasticsearch'] }}"

- name: Transfert {{ base_directory }}/node.key on local
  fetch:
    src: "{{ base_directory }}/node-{{ item }}.key"
    dest: "/tmp/es/"
    flat: yes
  loop: "{{ groups['elasticsearch'] }}"
  changed_when: false

- name: Generate an OpenSSL Certificate Signing Request with Subject information for node
  openssl_csr:
    path: "{{ base_directory }}/node-{{ item }}.csr"
    privatekey_path: "{{ base_directory }}/node-{{ item }}.key"
    common_name: Elastic Certificate Autogenerated CA
    basicConstraints: "CA:FALSE"
    key_usage:
      - digitalSignature
      - keyEncipherment
      - keyAgreement
    key_usage_critical: true
    extended_key_usage: serverAuth
    extended_key_usage_critical: true
    subject_alt_name: 'IP:{{ item }}'
  loop: "{{ groups['elasticsearch'] }}"

- name: Generate a Signed OpenSSL node certificate with root CA
  openssl_certificate:
    path: "{{ base_directory }}/node-{{ item }}.crt"
    csr_path: "{{ base_directory }}/node-{{ item }}.csr"
    ownca_path: "{{ base_directory }}/ca.crt"
    ownca_privatekey_path: "{{ base_directory }}/ca.key"
    ownca_privatekey_passphrase: "{{ ca_passphrase }}"
    provider: ownca
  loop: "{{ groups['elasticsearch'] }}"

- name: Transfert {{ base_directory }}/server.crt on local
  fetch:
    src: "{{ base_directory }}/node-{{ item }}.crt"
    dest: "/tmp/es/"
    flat: yes
  loop: "{{ groups['elasticsearch'] }}"
  changed_when: false


############# GENERATE KIBANA CERTIFICATE #################

- name: Generate an OpenSSL private key for kibana
  openssl_privatekey:
    path: "{{ base_directory }}/kibana-{{ item }}.key"
    size: 4096
  loop: "{{ groups['kibana'] }}"

- name: Transfert {{ base_directory }}/kibana.key on local
  fetch:
    src: "{{ base_directory }}/kibana-{{ item }}.key"
    dest: "/tmp/es/"
    flat: yes
  loop: "{{ groups['kibana'] }}"
  changed_when: false

- name: Generate an OpenSSL Certificate Signing Request with Subject information for kibana
  openssl_csr:
    path: "{{ base_directory }}/kibana-{{ item }}.csr"
    privatekey_path: "{{ base_directory }}/kibana-{{ item }}.key"
    common_name: Elastic Certificate Autogenerated CA
    basicConstraints: "CA:FALSE"
    key_usage:
      - digitalSignature
      - keyEncipherment
      - keyAgreement
    key_usage_critical: true
    extended_key_usage: serverAuth
    extended_key_usage_critical: true
    subject_alt_name: 'IP:{{ item }}'
  loop: "{{ groups['kibana'] }}"

- name: Generate a Signed OpenSSL kibana certificate with root CA
  openssl_certificate:
    path: "{{ base_directory }}/kibana-{{ item }}.crt"
    csr_path: "{{ base_directory }}/kibana-{{ item }}.csr"
    ownca_path: "{{ base_directory }}/ca.crt"
    ownca_privatekey_path: "{{ base_directory }}/ca.key"
    ownca_privatekey_passphrase: "{{ ca_passphrase }}"
    provider: ownca
  loop: "{{ groups['kibana'] }}"

- name: Transfert {{ base_directory }}/kibana.crt on local
  fetch:
    src: "{{ base_directory }}/kibana-{{ item }}.crt"
    dest: "/tmp/es/"
    flat: yes
  loop: "{{ groups['kibana'] }}"
  changed_when: false

...

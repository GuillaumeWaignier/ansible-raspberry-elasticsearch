---

- name: Add {{ group }} group on {{ ansible_default_ipv4.address }}
  group:
    name: "{{ group }}"
    state: present
- name: Create {{ user }} user on {{ ansible_default_ipv4.address }}
  user:
    name: "{{ user }}"
    group: "{{ group }}"
    createhome: no
    shell: /bin/bash
    state: present
- name: Create {{ base_directory }} directory on {{ ansible_default_ipv4.address }}
  file:
    path: "{{ base_directory }}"
    state: directory
    mode: 0755
    owner: "root"
    group: "root"


- name: Create sub-directory on {{ ansible_default_ipv4.address }}
  file:
    path: "{{ base_directory }}/{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ user }}"
    group: "{{ group }}"
  with_items:
    - kibana
    - kibana/config
    - kibana/data
  notify: restart_kibana

- name: Ensure log file exists on {{ ansible_default_ipv4.address }}
  copy:
    content: ""
    dest: /var/log/kibana.log
    force: no
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: 0644
  notify: restart_kibana

- name: Download Kibana for armv7l on {{ ansible_default_ipv4.address }} with version {{ version }}
  get_url:
    url: "https://artifacts.elastic.co/downloads/kibana/kibana-{{ version }}-linux-x86_64.tar.gz"
    dest: "{{ base_directory }}/kibana/kibana-{{ version }}.tar.gz"
    mode: '0644'
    force: yes
    owner: "{{ user }}"
    group: "{{ group }}"
  when: ansible_architecture == "armv7l"

- name: Download Kibana for aarch64 on {{ ansible_default_ipv4.address }} with version {{ version }}
  get_url:
    url: "https://artifacts.elastic.co/downloads/kibana/kibana-{{ version }}-linux-aarch64.tar.gz"
    dest: "{{ base_directory }}/kibana/kibana-{{ version }}.tar.gz"
    mode: '0644'
    force: yes
    owner: "{{ user }}"
    group: "{{ group }}"
  when: ansible_architecture == "aarch64"

- name: Download Kibana for x86_64 on {{ ansible_default_ipv4.address }} with version {{ version }}
  get_url:
    url: "https://artifacts.elastic.co/downloads/kibana/kibana-{{ version }}-linux-x86_64.tar.gz"
    dest: "{{ base_directory }}/kibana/kibana-{{ version }}.tar.gz"
    mode: '0644'
    force: yes
    owner: "{{ user }}"
    group: "{{ group }}"
  when: ansible_architecture == "x86_64"

- name: Extract kibana on {{ ansible_default_ipv4.address }} for armv7l or amd64
  unarchive:
    src: "{{ base_directory }}/kibana/kibana-{{ version }}.tar.gz"
    dest: "{{ base_directory }}/kibana"
    owner: "{{ user }}"
    group: "{{ group }}"
    exclude: kibana-{{ version }}-linux-x86_64/optimize/.babelcache.json
    remote_src: yes
  when: ansible_architecture == "armv7l" or ansible_architecture == "x86_64"
  notify: restart_kibana

- name: Extract kibana on {{ ansible_default_ipv4.address }} for aarch64
  unarchive:
    src: "{{ base_directory }}/kibana/kibana-{{ version }}.tar.gz"
    dest: "{{ base_directory }}/kibana"
    owner: "{{ user }}"
    group: "{{ group }}"
    exclude: kibana-{{ version }}-linux-aarch64/optimize/.babelcache.json
    remote_src: yes
  when: ansible_architecture == "aarch64"
  notify: restart_kibana

- name: Retrieve directory name after extraction of the archive
  shell:
    cmd: "ls -d {{ base_directory }}/kibana/kibana-{{ version }}*/ | sed 's/.$//'"
  register: directory_name
  changed_when: false

- name: Symlink for kibana on {{ ansible_default_ipv4.address }} for armv7l or amd64
  file:
    src: "{{ directory_name.stdout }}"
    path: "{{ base_directory }}/kibana/kibana"
    state: link
    force: yes
    owner: "{{ user }}"
    group: "{{ group }}"
  notify: restart_kibana

- name: Configure files for Kibana on {{ ansible_default_ipv4.address }}
  template:
    src: templates/{{ item }}.j2
    dest: "{{ base_directory }}/kibana/config/{{ item }}"
    owner: "{{user}}"
    group: "{{group}}"
    mode: 0644
  with_items:
    - kibana.yml
  notify: restart_kibana

- name: Copy certificates on {{ ansible_default_ipv4.address }}
  copy:
    src: "/tmp/es/{{ item }}"
    dest: "{{ base_directory }}/kibana/config/{{ item }}"
    owner: "{{ user }}"
    group: "{{ group }}"
  with_items:
    - ca.crt
    - kibana-{{ ansible_default_ipv4.address }}.key
    - kibana-{{ ansible_default_ipv4.address }}.crt
  notify: restart_kibana

- name: Copy certificate authority to trusted ca path of the os {{ ansible_default_ipv4.address }}
  copy:
    src: "{{ base_directory }}/kibana/config/{{ item }}"
    dest: "/usr/local/share/ca-certificates/"
    owner: "root"
    group: "root"
    mode: 0644
    remote_src: yes
  with_items:
    - ca.crt
  notify: install_ca

- name: Add Healthcheck script for Kibana on {{ ansible_default_ipv4.address }}
  template:
    src: "kibana-healthcheck.sh.j2"
    dest: "{{ base_directory }}/kibana/kibana-healthcheck.sh"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: 0744
  notify: restart_kibana

- name: Service systemD for Kibana on {{ ansible_default_ipv4.address }}
  template:
    src: templates/kibana.service.j2
    dest: /etc/systemd/system/kibana.service
    owner: root
    group: root
    mode: 0644
  notify: restart_kibana
- name: Enable service kibana
  systemd:
    enabled: yes
    daemon_reload: yes
    name: kibana.service

...
